// !!        WARNING
// !! DO NOT EDIT THIS FILE
//
// This file is generated by the openapi-generator module and is not meant for manual changes.
// Please read the README.md file in the openapi-generator module for additional information.
package org.jellyfin.apiclient.api.operations

import java.io.InputStream
import java.util.UUID
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import org.jellyfin.apiclient.api.client.KtorClient
import org.jellyfin.apiclient.api.client.Response
import org.jellyfin.apiclient.model.api.ImageInfo
import org.jellyfin.apiclient.model.api.ImageType

class ImageApi(
	private val api: KtorClient
) {
	/**
	 * Get artist image by name.
	 *
	 * @param name Artist name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getArtistImage(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Artists/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get artist image by name.
	 *
	 * @param name Artist name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getArtistImageUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Artists/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getGenreImage(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Genres/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get genre image by name.
	 *
	 * @param name Genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getGenreImageUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Genres/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Get item image infos.
	 *
	 * @param itemId Item id.
	 */
	suspend fun getItemImageInfos(itemId: UUID): Response<List<ImageInfo>> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.get<List<ImageInfo>>("/Items/{itemId}/Images", pathParameters, queryParameters,
				data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getItemImage(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: String? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getItemImageUrl(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: String? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Items/{itemId}/Images/{imageType}", pathParameters, queryParameters)
	}

	/**
	 * Set item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex (Unused) Image index.
	 */
	suspend fun setItemImage(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete an item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex The image index.
	 */
	suspend fun deleteItemImage(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Items/{itemId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getItemImage_2(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: String? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Items/{itemId}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getItemImage_2Url(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		tag: String? = null,
		cropWhitespace: Boolean? = null,
		format: String? = null,
		addPlayedIndicator: Boolean? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["tag"] = tag
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["format"] = format
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Set item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex (Unused) Image index.
	 */
	suspend fun setItemImage_2(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete an item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex The image index.
	 */
	suspend fun deleteItemImage_2(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param imageIndex Image index.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getItemImage2(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int,
		maxHeight: Int,
		tag: String,
		format: String,
		percentPlayed: Double,
		unplayedCount: Int,
		imageIndex: Int,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["maxWidth"] = maxWidth
		pathParameters["maxHeight"] = maxHeight
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["percentPlayed"] = percentPlayed
		pathParameters["unplayedCount"] = unplayedCount
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response =
				api.get<InputStream>("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Gets the item's image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param imageIndex Image index.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getItemImage2Url(
		itemId: UUID,
		imageType: ImageType,
		maxWidth: Int,
		maxHeight: Int,
		tag: String,
		format: String,
		percentPlayed: Double,
		unplayedCount: Int,
		imageIndex: Int,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["maxWidth"] = maxWidth
		pathParameters["maxHeight"] = maxHeight
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["percentPlayed"] = percentPlayed
		pathParameters["unplayedCount"] = unplayedCount
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
				pathParameters, queryParameters)
	}

	/**
	 * Updates the index for an item image.
	 *
	 * @param itemId Item id.
	 * @param imageType Image type.
	 * @param imageIndex Old image index.
	 * @param newIndex New image index.
	 */
	suspend fun updateItemImageIndex(
		itemId: UUID,
		imageType: ImageType,
		imageIndex: Int,
		newIndex: Int
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["itemId"] = itemId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["newIndex"] = newIndex
		val data = null
		val response = api.post<Unit>("/Items/{itemId}/Images/{imageType}/{imageIndex}/Index",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getMusicGenreImage(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get music genre image by name.
	 *
	 * @param name Music genre name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getMusicGenreImageUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/MusicGenres/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getPersonImage(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Persons/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get person image by name.
	 *
	 * @param name Person name.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getPersonImageUrl(
		name: String,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Persons/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getStudioImage(
		name: String,
		imageType: ImageType,
		tag: String,
		format: String,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Studios/{name}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get studio image by name.
	 *
	 * @param name Studio name.
	 * @param imageType Image type.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param imageIndex Image index.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getStudioImageUrl(
		name: String,
		imageType: ImageType,
		tag: String,
		format: String,
		imageIndex: Int? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["name"] = name
		pathParameters["imageType"] = imageType
		pathParameters["tag"] = tag
		pathParameters["format"] = format
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Studios/{name}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Sets the user image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	suspend fun postUserImage(
		userId: UUID,
		imageType: ImageType,
		index: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Users/{userId}/Images/{imageType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	suspend fun getUserImage(
		userId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): Response<InputStream> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		val data = null
		val response = api.get<InputStream>("/Users/{userId}/Images/{imageType}/{imageIndex}",
				pathParameters, queryParameters, data)
		return response
	}

	/**
	 * Get user profile image.
	 *
	 * @param userId User id.
	 * @param imageType Image type.
	 * @param imageIndex Image index.
	 * @param tag Optional. Supply the cache tag from the item object to receive strong caching
	 * headers.
	 * @param format Determines the output format of the image - original,gif,jpg,png.
	 * @param maxWidth The maximum image width to return.
	 * @param maxHeight The maximum image height to return.
	 * @param percentPlayed Optional. Percent to render for the percent played overlay.
	 * @param unplayedCount Optional. Unplayed count overlay to render.
	 * @param width The fixed image width to return.
	 * @param height The fixed image height to return.
	 * @param quality Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most
	 * cases.
	 * @param cropWhitespace Optional. Specify if whitespace should be cropped out of the image.
	 * True/False. If unspecified, whitespace will be cropped from logos and clear art.
	 * @param addPlayedIndicator Optional. Add a played indicator.
	 * @param blur Optional. Blur image.
	 * @param backgroundColor Optional. Apply a background color for transparent images.
	 * @param foregroundLayer Optional. Apply a foreground layer on top of the image.
	 */
	fun getUserImageUrl(
		userId: UUID,
		imageType: ImageType,
		imageIndex: Int? = null,
		tag: String? = null,
		format: String? = null,
		maxWidth: Int? = null,
		maxHeight: Int? = null,
		percentPlayed: Double? = null,
		unplayedCount: Int? = null,
		width: Int? = null,
		height: Int? = null,
		quality: Int? = null,
		cropWhitespace: Boolean? = null,
		addPlayedIndicator: Boolean? = null,
		blur: Int? = null,
		backgroundColor: String? = null,
		foregroundLayer: String? = null
	): String {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["imageIndex"] = imageIndex
		val queryParameters = mutableMapOf<String, Any?>()
		queryParameters["tag"] = tag
		queryParameters["format"] = format
		queryParameters["maxWidth"] = maxWidth
		queryParameters["maxHeight"] = maxHeight
		queryParameters["percentPlayed"] = percentPlayed
		queryParameters["unplayedCount"] = unplayedCount
		queryParameters["width"] = width
		queryParameters["height"] = height
		queryParameters["quality"] = quality
		queryParameters["cropWhitespace"] = cropWhitespace
		queryParameters["addPlayedIndicator"] = addPlayedIndicator
		queryParameters["blur"] = blur
		queryParameters["backgroundColor"] = backgroundColor
		queryParameters["foregroundLayer"] = foregroundLayer
		return api.createUrl("/Users/{userId}/Images/{imageType}/{imageIndex}", pathParameters,
				queryParameters)
	}

	/**
	 * Sets the user image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	suspend fun postUserImage_2(
		userId: UUID,
		imageType: ImageType,
		index: Int? = null
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.post<Unit>("/Users/{userId}/Images/{imageType}/{index}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete the user's image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	suspend fun deleteUserImage(
		userId: UUID,
		imageType: ImageType,
		index: Int? = null,
		itemType: String
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		pathParameters["itemType"] = itemType
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Users/{userId}/Images/{itemType}", pathParameters,
				queryParameters, data)
		return response
	}

	/**
	 * Delete the user's image.
	 *
	 * @param userId User Id.
	 * @param imageType (Unused) Image type.
	 * @param index (Unused) Image index.
	 */
	suspend fun deleteUserImage_2(
		userId: UUID,
		imageType: ImageType,
		index: Int? = null,
		itemType: String
	): Response<Unit> {
		val pathParameters = mutableMapOf<String, Any?>()
		pathParameters["userId"] = userId
		pathParameters["imageType"] = imageType
		pathParameters["index"] = index
		pathParameters["itemType"] = itemType
		val queryParameters = emptyMap<String, Any?>()
		val data = null
		val response = api.delete<Unit>("/Users/{userId}/Images/{itemType}/{index}", pathParameters,
				queryParameters, data)
		return response
	}
}
